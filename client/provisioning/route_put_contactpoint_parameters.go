// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// NewRoutePutContactpointParams creates a new RoutePutContactpointParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRoutePutContactpointParams() *RoutePutContactpointParams {
	return &RoutePutContactpointParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRoutePutContactpointParamsWithTimeout creates a new RoutePutContactpointParams object
// with the ability to set a timeout on a request.
func NewRoutePutContactpointParamsWithTimeout(timeout time.Duration) *RoutePutContactpointParams {
	return &RoutePutContactpointParams{
		timeout: timeout,
	}
}

// NewRoutePutContactpointParamsWithContext creates a new RoutePutContactpointParams object
// with the ability to set a context for a request.
func NewRoutePutContactpointParamsWithContext(ctx context.Context) *RoutePutContactpointParams {
	return &RoutePutContactpointParams{
		Context: ctx,
	}
}

// NewRoutePutContactpointParamsWithHTTPClient creates a new RoutePutContactpointParams object
// with the ability to set a custom HTTPClient for a request.
func NewRoutePutContactpointParamsWithHTTPClient(client *http.Client) *RoutePutContactpointParams {
	return &RoutePutContactpointParams{
		HTTPClient: client,
	}
}

/*
RoutePutContactpointParams contains all the parameters to send to the API endpoint

	for the route put contactpoint operation.

	Typically these are written to a http.Request.
*/
type RoutePutContactpointParams struct {

	// Body.
	Body *models.EmbeddedContactPoint

	/* UID.

	   UID is the contact point unique identifier
	*/
	UID string

	// XDisableProvenance.
	XDisableProvenance *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the route put contactpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoutePutContactpointParams) WithDefaults() *RoutePutContactpointParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the route put contactpoint params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RoutePutContactpointParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the route put contactpoint params
func (o *RoutePutContactpointParams) WithTimeout(timeout time.Duration) *RoutePutContactpointParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route put contactpoint params
func (o *RoutePutContactpointParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route put contactpoint params
func (o *RoutePutContactpointParams) WithContext(ctx context.Context) *RoutePutContactpointParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route put contactpoint params
func (o *RoutePutContactpointParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route put contactpoint params
func (o *RoutePutContactpointParams) WithHTTPClient(client *http.Client) *RoutePutContactpointParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route put contactpoint params
func (o *RoutePutContactpointParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the route put contactpoint params
func (o *RoutePutContactpointParams) WithBody(body *models.EmbeddedContactPoint) *RoutePutContactpointParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the route put contactpoint params
func (o *RoutePutContactpointParams) SetBody(body *models.EmbeddedContactPoint) {
	o.Body = body
}

// WithUID adds the uid to the route put contactpoint params
func (o *RoutePutContactpointParams) WithUID(uid string) *RoutePutContactpointParams {
	o.SetUID(uid)
	return o
}

// SetUID adds the uid to the route put contactpoint params
func (o *RoutePutContactpointParams) SetUID(uid string) {
	o.UID = uid
}

// WithXDisableProvenance adds the xDisableProvenance to the route put contactpoint params
func (o *RoutePutContactpointParams) WithXDisableProvenance(xDisableProvenance *string) *RoutePutContactpointParams {
	o.SetXDisableProvenance(xDisableProvenance)
	return o
}

// SetXDisableProvenance adds the xDisableProvenance to the route put contactpoint params
func (o *RoutePutContactpointParams) SetXDisableProvenance(xDisableProvenance *string) {
	o.XDisableProvenance = xDisableProvenance
}

// WriteToRequest writes these params to a swagger request
func (o *RoutePutContactpointParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param UID
	if err := r.SetPathParam("UID", o.UID); err != nil {
		return err
	}

	if o.XDisableProvenance != nil {

		// header param X-Disable-Provenance
		if err := r.SetHeaderParam("X-Disable-Provenance", *o.XDisableProvenance); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

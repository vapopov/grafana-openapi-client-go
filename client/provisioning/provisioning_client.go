// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new provisioning API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for provisioning API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	RouteDeleteAlertRule(params *RouteDeleteAlertRuleParams, opts ...ClientOption) (*RouteDeleteAlertRuleNoContent, error)

	RouteDeleteAlertRuleGroup(group string, folderUID string, opts ...ClientOption) (*RouteDeleteAlertRuleGroupNoContent, error)
	RouteDeleteAlertRuleGroupWithParams(params *RouteDeleteAlertRuleGroupParams, opts ...ClientOption) (*RouteDeleteAlertRuleGroupNoContent, error)

	RouteDeleteContactpoints(uid string, opts ...ClientOption) (*RouteDeleteContactpointsAccepted, error)
	RouteDeleteContactpointsWithParams(params *RouteDeleteContactpointsParams, opts ...ClientOption) (*RouteDeleteContactpointsAccepted, error)

	RouteDeleteMuteTiming(name string, opts ...ClientOption) (*RouteDeleteMuteTimingNoContent, error)
	RouteDeleteMuteTimingWithParams(params *RouteDeleteMuteTimingParams, opts ...ClientOption) (*RouteDeleteMuteTimingNoContent, error)

	RouteDeleteTemplate(name string, opts ...ClientOption) (*RouteDeleteTemplateNoContent, error)
	RouteDeleteTemplateWithParams(params *RouteDeleteTemplateParams, opts ...ClientOption) (*RouteDeleteTemplateNoContent, error)

	RouteExportMuteTiming(params *RouteExportMuteTimingParams, opts ...ClientOption) (*RouteExportMuteTimingOK, error)

	RouteExportMuteTimings(params *RouteExportMuteTimingsParams, opts ...ClientOption) (*RouteExportMuteTimingsOK, error)

	RouteGetAlertRule(uid string, opts ...ClientOption) (*RouteGetAlertRuleOK, error)
	RouteGetAlertRuleWithParams(params *RouteGetAlertRuleParams, opts ...ClientOption) (*RouteGetAlertRuleOK, error)

	RouteGetAlertRuleExport(params *RouteGetAlertRuleExportParams, opts ...ClientOption) (*RouteGetAlertRuleExportOK, error)

	RouteGetAlertRuleGroup(group string, folderUID string, opts ...ClientOption) (*RouteGetAlertRuleGroupOK, error)
	RouteGetAlertRuleGroupWithParams(params *RouteGetAlertRuleGroupParams, opts ...ClientOption) (*RouteGetAlertRuleGroupOK, error)

	RouteGetAlertRuleGroupExport(params *RouteGetAlertRuleGroupExportParams, opts ...ClientOption) (*RouteGetAlertRuleGroupExportOK, error)

	RouteGetAlertRules(opts ...ClientOption) (*RouteGetAlertRulesOK, error)
	RouteGetAlertRulesWithParams(params *RouteGetAlertRulesParams, opts ...ClientOption) (*RouteGetAlertRulesOK, error)

	RouteGetAlertRulesExport(params *RouteGetAlertRulesExportParams, opts ...ClientOption) (*RouteGetAlertRulesExportOK, error)

	RouteGetContactpoints(params *RouteGetContactpointsParams, opts ...ClientOption) (*RouteGetContactpointsOK, error)

	RouteGetContactpointsExport(params *RouteGetContactpointsExportParams, opts ...ClientOption) (*RouteGetContactpointsExportOK, error)

	RouteGetMuteTiming(name string, opts ...ClientOption) (*RouteGetMuteTimingOK, error)
	RouteGetMuteTimingWithParams(params *RouteGetMuteTimingParams, opts ...ClientOption) (*RouteGetMuteTimingOK, error)

	RouteGetMuteTimings(opts ...ClientOption) (*RouteGetMuteTimingsOK, error)
	RouteGetMuteTimingsWithParams(params *RouteGetMuteTimingsParams, opts ...ClientOption) (*RouteGetMuteTimingsOK, error)

	RouteGetPolicyTree(opts ...ClientOption) (*RouteGetPolicyTreeOK, error)
	RouteGetPolicyTreeWithParams(params *RouteGetPolicyTreeParams, opts ...ClientOption) (*RouteGetPolicyTreeOK, error)

	RouteGetPolicyTreeExport(opts ...ClientOption) (*RouteGetPolicyTreeExportOK, error)
	RouteGetPolicyTreeExportWithParams(params *RouteGetPolicyTreeExportParams, opts ...ClientOption) (*RouteGetPolicyTreeExportOK, error)

	RouteGetTemplate(name string, opts ...ClientOption) (*RouteGetTemplateOK, error)
	RouteGetTemplateWithParams(params *RouteGetTemplateParams, opts ...ClientOption) (*RouteGetTemplateOK, error)

	RouteGetTemplates(opts ...ClientOption) (*RouteGetTemplatesOK, error)
	RouteGetTemplatesWithParams(params *RouteGetTemplatesParams, opts ...ClientOption) (*RouteGetTemplatesOK, error)

	RoutePostAlertRule(params *RoutePostAlertRuleParams, opts ...ClientOption) (*RoutePostAlertRuleCreated, error)

	RoutePostContactpoints(params *RoutePostContactpointsParams, opts ...ClientOption) (*RoutePostContactpointsAccepted, error)

	RoutePostMuteTiming(params *RoutePostMuteTimingParams, opts ...ClientOption) (*RoutePostMuteTimingCreated, error)

	RoutePutAlertRule(params *RoutePutAlertRuleParams, opts ...ClientOption) (*RoutePutAlertRuleOK, error)

	RoutePutAlertRuleGroup(params *RoutePutAlertRuleGroupParams, opts ...ClientOption) (*RoutePutAlertRuleGroupOK, error)

	RoutePutContactpoint(params *RoutePutContactpointParams, opts ...ClientOption) (*RoutePutContactpointAccepted, error)

	RoutePutMuteTiming(params *RoutePutMuteTimingParams, opts ...ClientOption) (*RoutePutMuteTimingAccepted, error)

	RoutePutPolicyTree(params *RoutePutPolicyTreeParams, opts ...ClientOption) (*RoutePutPolicyTreeAccepted, error)

	RoutePutTemplate(params *RoutePutTemplateParams, opts ...ClientOption) (*RoutePutTemplateAccepted, error)

	RouteResetPolicyTree(opts ...ClientOption) (*RouteResetPolicyTreeAccepted, error)
	RouteResetPolicyTreeWithParams(params *RouteResetPolicyTreeParams, opts ...ClientOption) (*RouteResetPolicyTreeAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
RouteDeleteAlertRule deletes a specific alert rule by UID
*/

func (a *Client) RouteDeleteAlertRule(params *RouteDeleteAlertRuleParams, opts ...ClientOption) (*RouteDeleteAlertRuleNoContent, error) {
	if params == nil {
		params = NewRouteDeleteAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteAlertRule",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteAlertRuleNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteDeleteAlertRuleGroup Delete rule group
*/
func (a *Client) RouteDeleteAlertRuleGroup(group string, folderUID string, opts ...ClientOption) (*RouteDeleteAlertRuleGroupNoContent, error) {
	params := NewRouteDeleteAlertRuleGroupParams().WithFolderUID(folderUID).WithGroup(group)
	return a.RouteDeleteAlertRuleGroupWithParams(params, opts...)
}

func (a *Client) RouteDeleteAlertRuleGroupWithParams(params *RouteDeleteAlertRuleGroupParams, opts ...ClientOption) (*RouteDeleteAlertRuleGroupNoContent, error) {
	if params == nil {
		params = NewRouteDeleteAlertRuleGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteAlertRuleGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteAlertRuleGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteAlertRuleGroupNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteAlertRuleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteDeleteContactpoints deletes a contact point
*/
func (a *Client) RouteDeleteContactpoints(uid string, opts ...ClientOption) (*RouteDeleteContactpointsAccepted, error) {
	params := NewRouteDeleteContactpointsParams().WithUID(uid)
	return a.RouteDeleteContactpointsWithParams(params, opts...)
}

func (a *Client) RouteDeleteContactpointsWithParams(params *RouteDeleteContactpointsParams, opts ...ClientOption) (*RouteDeleteContactpointsAccepted, error) {
	if params == nil {
		params = NewRouteDeleteContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteContactpoints",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/contact-points/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteContactpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteContactpointsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteDeleteMuteTiming deletes a mute timing
*/
func (a *Client) RouteDeleteMuteTiming(name string, opts ...ClientOption) (*RouteDeleteMuteTimingNoContent, error) {
	params := NewRouteDeleteMuteTimingParams().WithName(name)
	return a.RouteDeleteMuteTimingWithParams(params, opts...)
}

func (a *Client) RouteDeleteMuteTimingWithParams(params *RouteDeleteMuteTimingParams, opts ...ClientOption) (*RouteDeleteMuteTimingNoContent, error) {
	if params == nil {
		params = NewRouteDeleteMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteMuteTiming",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteMuteTimingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteMuteTimingNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteDeleteTemplate deletes a template
*/
func (a *Client) RouteDeleteTemplate(name string, opts ...ClientOption) (*RouteDeleteTemplateNoContent, error) {
	params := NewRouteDeleteTemplateParams().WithName(name)
	return a.RouteDeleteTemplateWithParams(params, opts...)
}

func (a *Client) RouteDeleteTemplateWithParams(params *RouteDeleteTemplateParams, opts ...ClientOption) (*RouteDeleteTemplateNoContent, error) {
	if params == nil {
		params = NewRouteDeleteTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteDeleteTemplate",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteDeleteTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteDeleteTemplateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteDeleteTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteExportMuteTiming exports a mute timing in provisioning format
*/

func (a *Client) RouteExportMuteTiming(params *RouteExportMuteTimingParams, opts ...ClientOption) (*RouteExportMuteTimingOK, error) {
	if params == nil {
		params = NewRouteExportMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteExportMuteTiming",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/mute-timings/{name}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteExportMuteTimingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteExportMuteTimingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteExportMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteExportMuteTimings exports all mute timings in provisioning format
*/

func (a *Client) RouteExportMuteTimings(params *RouteExportMuteTimingsParams, opts ...ClientOption) (*RouteExportMuteTimingsOK, error) {
	if params == nil {
		params = NewRouteExportMuteTimingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteExportMuteTimings",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/mute-timings/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteExportMuteTimingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteExportMuteTimingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteExportMuteTimings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRule gets a specific alert rule by UID
*/
func (a *Client) RouteGetAlertRule(uid string, opts ...ClientOption) (*RouteGetAlertRuleOK, error) {
	params := NewRouteGetAlertRuleParams().WithUID(uid)
	return a.RouteGetAlertRuleWithParams(params, opts...)
}

func (a *Client) RouteGetAlertRuleWithParams(params *RouteGetAlertRuleParams, opts ...ClientOption) (*RouteGetAlertRuleOK, error) {
	if params == nil {
		params = NewRouteGetAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRule",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRuleExport exports an alert rule in provisioning file format
*/

func (a *Client) RouteGetAlertRuleExport(params *RouteGetAlertRuleExportParams, opts ...ClientOption) (*RouteGetAlertRuleExportOK, error) {
	if params == nil {
		params = NewRouteGetAlertRuleExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRuleExport",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/alert-rules/{UID}/export",
		ProducesMediaTypes: []string{"application/json", "application/yaml", "text/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRuleExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRuleExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRuleExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRuleGroup gets a rule group
*/
func (a *Client) RouteGetAlertRuleGroup(group string, folderUID string, opts ...ClientOption) (*RouteGetAlertRuleGroupOK, error) {
	params := NewRouteGetAlertRuleGroupParams().WithFolderUID(folderUID).WithGroup(group)
	return a.RouteGetAlertRuleGroupWithParams(params, opts...)
}

func (a *Client) RouteGetAlertRuleGroupWithParams(params *RouteGetAlertRuleGroupParams, opts ...ClientOption) (*RouteGetAlertRuleGroupOK, error) {
	if params == nil {
		params = NewRouteGetAlertRuleGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRuleGroup",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRuleGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRuleGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRuleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRuleGroupExport exports an alert rule group in provisioning file format
*/

func (a *Client) RouteGetAlertRuleGroupExport(params *RouteGetAlertRuleGroupExportParams, opts ...ClientOption) (*RouteGetAlertRuleGroupExportOK, error) {
	if params == nil {
		params = NewRouteGetAlertRuleGroupExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRuleGroupExport",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}/export",
		ProducesMediaTypes: []string{"application/json", "application/yaml", "text/yaml"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRuleGroupExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRuleGroupExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRuleGroupExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRules gets all the alert rules
*/
func (a *Client) RouteGetAlertRules(opts ...ClientOption) (*RouteGetAlertRulesOK, error) {
	params := NewRouteGetAlertRulesParams()
	return a.RouteGetAlertRulesWithParams(params, opts...)
}

func (a *Client) RouteGetAlertRulesWithParams(params *RouteGetAlertRulesParams, opts ...ClientOption) (*RouteGetAlertRulesOK, error) {
	if params == nil {
		params = NewRouteGetAlertRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRules",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetAlertRulesExport exports all alert rules in provisioning file format
*/

func (a *Client) RouteGetAlertRulesExport(params *RouteGetAlertRulesExportParams, opts ...ClientOption) (*RouteGetAlertRulesExportOK, error) {
	if params == nil {
		params = NewRouteGetAlertRulesExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetAlertRulesExport",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/alert-rules/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetAlertRulesExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetAlertRulesExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetAlertRulesExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetContactpoints gets all the contact points
*/

func (a *Client) RouteGetContactpoints(params *RouteGetContactpointsParams, opts ...ClientOption) (*RouteGetContactpointsOK, error) {
	if params == nil {
		params = NewRouteGetContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetContactpoints",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/contact-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetContactpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetContactpointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetContactpointsExport exports all contact points in provisioning file format
*/

func (a *Client) RouteGetContactpointsExport(params *RouteGetContactpointsExportParams, opts ...ClientOption) (*RouteGetContactpointsExportOK, error) {
	if params == nil {
		params = NewRouteGetContactpointsExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetContactpointsExport",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/contact-points/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetContactpointsExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetContactpointsExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetContactpointsExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetMuteTiming gets a mute timing
*/
func (a *Client) RouteGetMuteTiming(name string, opts ...ClientOption) (*RouteGetMuteTimingOK, error) {
	params := NewRouteGetMuteTimingParams().WithName(name)
	return a.RouteGetMuteTimingWithParams(params, opts...)
}

func (a *Client) RouteGetMuteTimingWithParams(params *RouteGetMuteTimingParams, opts ...ClientOption) (*RouteGetMuteTimingOK, error) {
	if params == nil {
		params = NewRouteGetMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetMuteTiming",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetMuteTimingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetMuteTimingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetMuteTimings gets all the mute timings
*/
func (a *Client) RouteGetMuteTimings(opts ...ClientOption) (*RouteGetMuteTimingsOK, error) {
	params := NewRouteGetMuteTimingsParams()
	return a.RouteGetMuteTimingsWithParams(params, opts...)
}

func (a *Client) RouteGetMuteTimingsWithParams(params *RouteGetMuteTimingsParams, opts ...ClientOption) (*RouteGetMuteTimingsOK, error) {
	if params == nil {
		params = NewRouteGetMuteTimingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetMuteTimings",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/mute-timings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetMuteTimingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetMuteTimingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetMuteTimings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetPolicyTree gets the notification policy tree
*/
func (a *Client) RouteGetPolicyTree(opts ...ClientOption) (*RouteGetPolicyTreeOK, error) {
	params := NewRouteGetPolicyTreeParams()
	return a.RouteGetPolicyTreeWithParams(params, opts...)
}

func (a *Client) RouteGetPolicyTreeWithParams(params *RouteGetPolicyTreeParams, opts ...ClientOption) (*RouteGetPolicyTreeOK, error) {
	if params == nil {
		params = NewRouteGetPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetPolicyTree",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetPolicyTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetPolicyTreeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetPolicyTreeExport exports the notification policy tree in provisioning file format
*/
func (a *Client) RouteGetPolicyTreeExport(opts ...ClientOption) (*RouteGetPolicyTreeExportOK, error) {
	params := NewRouteGetPolicyTreeExportParams()
	return a.RouteGetPolicyTreeExportWithParams(params, opts...)
}

func (a *Client) RouteGetPolicyTreeExportWithParams(params *RouteGetPolicyTreeExportParams, opts ...ClientOption) (*RouteGetPolicyTreeExportOK, error) {
	if params == nil {
		params = NewRouteGetPolicyTreeExportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetPolicyTreeExport",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/policies/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetPolicyTreeExportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetPolicyTreeExportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetPolicyTreeExport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetTemplate gets a notification template
*/
func (a *Client) RouteGetTemplate(name string, opts ...ClientOption) (*RouteGetTemplateOK, error) {
	params := NewRouteGetTemplateParams().WithName(name)
	return a.RouteGetTemplateWithParams(params, opts...)
}

func (a *Client) RouteGetTemplateWithParams(params *RouteGetTemplateParams, opts ...ClientOption) (*RouteGetTemplateOK, error) {
	if params == nil {
		params = NewRouteGetTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetTemplate",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteGetTemplates gets all notification templates
*/
func (a *Client) RouteGetTemplates(opts ...ClientOption) (*RouteGetTemplatesOK, error) {
	params := NewRouteGetTemplatesParams()
	return a.RouteGetTemplatesWithParams(params, opts...)
}

func (a *Client) RouteGetTemplatesWithParams(params *RouteGetTemplatesParams, opts ...ClientOption) (*RouteGetTemplatesOK, error) {
	if params == nil {
		params = NewRouteGetTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteGetTemplates",
		Method:             "GET",
		PathPattern:        "/v1/provisioning/templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteGetTemplatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteGetTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteGetTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePostAlertRule creates a new alert rule
*/

func (a *Client) RoutePostAlertRule(params *RoutePostAlertRuleParams, opts ...ClientOption) (*RoutePostAlertRuleCreated, error) {
	if params == nil {
		params = NewRoutePostAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostAlertRule",
		Method:             "POST",
		PathPattern:        "/v1/provisioning/alert-rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostAlertRuleCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePostContactpoints creates a contact point
*/

func (a *Client) RoutePostContactpoints(params *RoutePostContactpointsParams, opts ...ClientOption) (*RoutePostContactpointsAccepted, error) {
	if params == nil {
		params = NewRoutePostContactpointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostContactpoints",
		Method:             "POST",
		PathPattern:        "/v1/provisioning/contact-points",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostContactpointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostContactpointsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostContactpoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePostMuteTiming creates a new mute timing
*/

func (a *Client) RoutePostMuteTiming(params *RoutePostMuteTimingParams, opts ...ClientOption) (*RoutePostMuteTimingCreated, error) {
	if params == nil {
		params = NewRoutePostMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePostMuteTiming",
		Method:             "POST",
		PathPattern:        "/v1/provisioning/mute-timings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePostMuteTimingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePostMuteTimingCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePostMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutAlertRule updates an existing alert rule
*/

func (a *Client) RoutePutAlertRule(params *RoutePutAlertRuleParams, opts ...ClientOption) (*RoutePutAlertRuleOK, error) {
	if params == nil {
		params = NewRoutePutAlertRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutAlertRule",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/alert-rules/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutAlertRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutAlertRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutAlertRule: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutAlertRuleGroup updates the interval of a rule group
*/

func (a *Client) RoutePutAlertRuleGroup(params *RoutePutAlertRuleGroupParams, opts ...ClientOption) (*RoutePutAlertRuleGroupOK, error) {
	if params == nil {
		params = NewRoutePutAlertRuleGroupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutAlertRuleGroup",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/folder/{FolderUID}/rule-groups/{Group}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutAlertRuleGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutAlertRuleGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutAlertRuleGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutContactpoint updates an existing contact point
*/

func (a *Client) RoutePutContactpoint(params *RoutePutContactpointParams, opts ...ClientOption) (*RoutePutContactpointAccepted, error) {
	if params == nil {
		params = NewRoutePutContactpointParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutContactpoint",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/contact-points/{UID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutContactpointReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutContactpointAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutContactpoint: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutMuteTiming replaces an existing mute timing
*/

func (a *Client) RoutePutMuteTiming(params *RoutePutMuteTimingParams, opts ...ClientOption) (*RoutePutMuteTimingAccepted, error) {
	if params == nil {
		params = NewRoutePutMuteTimingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutMuteTiming",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/mute-timings/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutMuteTimingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutMuteTimingAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutMuteTiming: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutPolicyTree sets the notification policy tree
*/

func (a *Client) RoutePutPolicyTree(params *RoutePutPolicyTreeParams, opts ...ClientOption) (*RoutePutPolicyTreeAccepted, error) {
	if params == nil {
		params = NewRoutePutPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutPolicyTree",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutPolicyTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutPolicyTreeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RoutePutTemplate updates an existing notification template
*/

func (a *Client) RoutePutTemplate(params *RoutePutTemplateParams, opts ...ClientOption) (*RoutePutTemplateAccepted, error) {
	if params == nil {
		params = NewRoutePutTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RoutePutTemplate",
		Method:             "PUT",
		PathPattern:        "/v1/provisioning/templates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RoutePutTemplateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RoutePutTemplateAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RoutePutTemplate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RouteResetPolicyTree clears the notification policy tree
*/
func (a *Client) RouteResetPolicyTree(opts ...ClientOption) (*RouteResetPolicyTreeAccepted, error) {
	params := NewRouteResetPolicyTreeParams()
	return a.RouteResetPolicyTreeWithParams(params, opts...)
}

func (a *Client) RouteResetPolicyTreeWithParams(params *RouteResetPolicyTreeParams, opts ...ClientOption) (*RouteResetPolicyTreeAccepted, error) {
	if params == nil {
		params = NewRouteResetPolicyTreeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "RouteResetPolicyTree",
		Method:             "DELETE",
		PathPattern:        "/v1/provisioning/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RouteResetPolicyTreeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		if opt != nil {
			opt(op)
		}
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RouteResetPolicyTreeAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RouteResetPolicyTree: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// WithAuthInfo changes the transport on the client
func WithAuthInfo(authInfo runtime.ClientAuthInfoWriter) ClientOption {
	return func(op *runtime.ClientOperation) {
		op.AuthInfo = authInfo
	}
}

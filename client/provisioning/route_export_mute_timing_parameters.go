// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRouteExportMuteTimingParams creates a new RouteExportMuteTimingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewRouteExportMuteTimingParams() *RouteExportMuteTimingParams {
	return &RouteExportMuteTimingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewRouteExportMuteTimingParamsWithTimeout creates a new RouteExportMuteTimingParams object
// with the ability to set a timeout on a request.
func NewRouteExportMuteTimingParamsWithTimeout(timeout time.Duration) *RouteExportMuteTimingParams {
	return &RouteExportMuteTimingParams{
		timeout: timeout,
	}
}

// NewRouteExportMuteTimingParamsWithContext creates a new RouteExportMuteTimingParams object
// with the ability to set a context for a request.
func NewRouteExportMuteTimingParamsWithContext(ctx context.Context) *RouteExportMuteTimingParams {
	return &RouteExportMuteTimingParams{
		Context: ctx,
	}
}

// NewRouteExportMuteTimingParamsWithHTTPClient creates a new RouteExportMuteTimingParams object
// with the ability to set a custom HTTPClient for a request.
func NewRouteExportMuteTimingParamsWithHTTPClient(client *http.Client) *RouteExportMuteTimingParams {
	return &RouteExportMuteTimingParams{
		HTTPClient: client,
	}
}

/*
RouteExportMuteTimingParams contains all the parameters to send to the API endpoint

	for the route export mute timing operation.

	Typically these are written to a http.Request.
*/
type RouteExportMuteTimingParams struct {

	/* Download.

	   Whether to initiate a download of the file or not.
	*/
	Download *bool

	/* Format.

	   Format of the downloaded file, either yaml or json. Accept header can also be used, but the query parameter will take precedence.

	   Default: "yaml"
	*/
	Format *string

	/* Name.

	   Mute timing name
	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the route export mute timing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteExportMuteTimingParams) WithDefaults() *RouteExportMuteTimingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the route export mute timing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *RouteExportMuteTimingParams) SetDefaults() {
	var (
		downloadDefault = bool(false)

		formatDefault = string("yaml")
	)

	val := RouteExportMuteTimingParams{
		Download: &downloadDefault,
		Format:   &formatDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithTimeout(timeout time.Duration) *RouteExportMuteTimingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithContext(ctx context.Context) *RouteExportMuteTimingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithHTTPClient(client *http.Client) *RouteExportMuteTimingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDownload adds the download to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithDownload(download *bool) *RouteExportMuteTimingParams {
	o.SetDownload(download)
	return o
}

// SetDownload adds the download to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetDownload(download *bool) {
	o.Download = download
}

// WithFormat adds the format to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithFormat(format *string) *RouteExportMuteTimingParams {
	o.SetFormat(format)
	return o
}

// SetFormat adds the format to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetFormat(format *string) {
	o.Format = format
}

// WithName adds the name to the route export mute timing params
func (o *RouteExportMuteTimingParams) WithName(name string) *RouteExportMuteTimingParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the route export mute timing params
func (o *RouteExportMuteTimingParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *RouteExportMuteTimingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Download != nil {

		// query param download
		var qrDownload bool

		if o.Download != nil {
			qrDownload = *o.Download
		}
		qDownload := swag.FormatBool(qrDownload)
		if qDownload != "" {

			if err := r.SetQueryParam("download", qDownload); err != nil {
				return err
			}
		}
	}

	if o.Format != nil {

		// query param format
		var qrFormat string

		if o.Format != nil {
			qrFormat = *o.Format
		}
		qFormat := qrFormat
		if qFormat != "" {

			if err := r.SetQueryParam("format", qFormat); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

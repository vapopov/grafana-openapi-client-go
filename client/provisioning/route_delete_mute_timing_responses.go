// Code generated by go-swagger; DO NOT EDIT.

package provisioning

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/grafana/grafana-openapi-client-go/models"
)

// RouteDeleteMuteTimingReader is a Reader for the RouteDeleteMuteTiming structure.
type RouteDeleteMuteTimingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RouteDeleteMuteTimingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRouteDeleteMuteTimingNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewRouteDeleteMuteTimingConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /v1/provisioning/mute-timings/{name}] RouteDeleteMuteTiming", response, response.Code())
	}
}

// NewRouteDeleteMuteTimingNoContent creates a RouteDeleteMuteTimingNoContent with default headers values
func NewRouteDeleteMuteTimingNoContent() *RouteDeleteMuteTimingNoContent {
	return &RouteDeleteMuteTimingNoContent{}
}

/*
RouteDeleteMuteTimingNoContent describes a response with status code 204, with default header values.

	The mute timing was deleted successfully.
*/
type RouteDeleteMuteTimingNoContent struct {
}

// IsSuccess returns true when this route delete mute timing no content response has a 2xx status code
func (o *RouteDeleteMuteTimingNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this route delete mute timing no content response has a 3xx status code
func (o *RouteDeleteMuteTimingNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route delete mute timing no content response has a 4xx status code
func (o *RouteDeleteMuteTimingNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this route delete mute timing no content response has a 5xx status code
func (o *RouteDeleteMuteTimingNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this route delete mute timing no content response a status code equal to that given
func (o *RouteDeleteMuteTimingNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the route delete mute timing no content response
func (o *RouteDeleteMuteTimingNoContent) Code() int {
	return 204
}

func (o *RouteDeleteMuteTimingNoContent) Error() string {
	return fmt.Sprintf("[DELETE /v1/provisioning/mute-timings/{name}][%d] routeDeleteMuteTimingNoContent", 204)
}

func (o *RouteDeleteMuteTimingNoContent) String() string {
	return fmt.Sprintf("[DELETE /v1/provisioning/mute-timings/{name}][%d] routeDeleteMuteTimingNoContent", 204)
}

func (o *RouteDeleteMuteTimingNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRouteDeleteMuteTimingConflict creates a RouteDeleteMuteTimingConflict with default headers values
func NewRouteDeleteMuteTimingConflict() *RouteDeleteMuteTimingConflict {
	return &RouteDeleteMuteTimingConflict{}
}

/*
RouteDeleteMuteTimingConflict describes a response with status code 409, with default header values.

GenericPublicError
*/
type RouteDeleteMuteTimingConflict struct {
	Payload *models.GenericPublicError
}

// IsSuccess returns true when this route delete mute timing conflict response has a 2xx status code
func (o *RouteDeleteMuteTimingConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this route delete mute timing conflict response has a 3xx status code
func (o *RouteDeleteMuteTimingConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this route delete mute timing conflict response has a 4xx status code
func (o *RouteDeleteMuteTimingConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this route delete mute timing conflict response has a 5xx status code
func (o *RouteDeleteMuteTimingConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this route delete mute timing conflict response a status code equal to that given
func (o *RouteDeleteMuteTimingConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the route delete mute timing conflict response
func (o *RouteDeleteMuteTimingConflict) Code() int {
	return 409
}

func (o *RouteDeleteMuteTimingConflict) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/provisioning/mute-timings/{name}][%d] routeDeleteMuteTimingConflict %s", 409, payload)
}

func (o *RouteDeleteMuteTimingConflict) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[DELETE /v1/provisioning/mute-timings/{name}][%d] routeDeleteMuteTimingConflict %s", 409, payload)
}

func (o *RouteDeleteMuteTimingConflict) GetPayload() *models.GenericPublicError {
	return o.Payload
}

func (o *RouteDeleteMuteTimingConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GenericPublicError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
